buildscript {
    repositories {
        maven {
        mavenCentral();
            url "http://repo.springsource.org/plugins-release";
        }
    }
    dependencies {
    classpath(group: "info.solidsoft.gradle.pitest",
        name: "gradle-pitest-plugin", version: "1.1.6");
        classpath(group: "org.springframework.build.gradle",
            name: "propdeps-plugin", version: "0.0.7");
    }
};

subprojects {
    repositories {
        mavenCentral();
        //mavenLocal();
    }

    apply(plugin: "java");
    apply(plugin: "maven");
    apply(plugin: "signing");
    apply(plugin: "idea");
    apply(plugin: "eclipse");
    apply(plugin: "propdeps");
    apply(plugin: "propdeps-maven");
    apply(plugin: "propdeps-idea");
    apply(plugin: "propdeps-eclipse");
    
    group = "com.github.fge";
    version = "0.3.1-SNAPSHOT";

    def javaVersion = JavaVersion.VERSION_1_8;
    sourceCompatibility = javaVersion;
    targetCompatibility = javaVersion; // defaults to sourceCompatibility

    dependencies {
        provided(group: "com.google.code.findbugs", name: "jsr305",
            version: "3.0.1");
        testCompile(group: "org.testng", name: "testng", version: "6.9.9") {
            exclude(group: "org.apache.ant", module: "ant");
            exclude(group: "com.google.inject", module: "guice");
            exclude(group: "junit", module: "junit");
            exclude(group: "org.beanshell", module: "bsh");
            exclude(group: "org.yaml", module: "snakeyaml");
        };
        testCompile(group: "org.mockito", name: "mockito-core", version:
            "1.10.19");
        testCompile(group: "org.assertj", name: "assertj-core", version:
            "3.2.0");
    }

    javadoc.options.links("http://docs.oracle.com/javase/8/docs/api/");

    task enforceVersion << {
        def foundVersion = JavaVersion.current();
        if (foundVersion != javaVersion)
            throw new IllegalStateException("Wrong java version; required is " +
                javaVersion + ", but found " + foundVersion);
    }
    
    compileJava.dependsOn(enforceVersion);
    
    /*
     * Necessary! Otherwise TestNG will not be used...
     */
    test {
        useTestNG() {
            useDefaultListeners = true;
        };
    }

    /*
     * Necessary to generate the source and javadoc jars
     */
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources";
        from sourceSets.main.allSource;
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = "javadoc";
        from javadoc.destinationDir;
    }
    
    artifacts {
        archives jar;
        archives sourcesJar;
        archives javadocJar;
    }
    
    task wrapper(type: Wrapper) {
        gradleVersion = "2.9";
        distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip";
    }

    /*
     * SIGNING
     */
    
    project.ext {
        gitrwscm = sprintf("git@github.com:fge/%s", name);
        gitroscm = sprintf("https://github.com/fge/%s.git", name);
        projectURL = sprintf("https://github.com/fge/%s", name);
        sonatypeStaging = "https://oss.sonatype.org/service/local/staging/deploy/maven2/";
        sonatypeSnapshots = "https://oss.sonatype.org/content/repositories/snapshots/";
    };
    
    task checkSigningRequirements << {
        def requiredProperties = [ "sonatypeUsername", "sonatypePassword" ];
        def noDice = false;
        requiredProperties.each {
            if (project.properties[it] == null) {
                noDice = true;
                System.err.printf("property \"%s\" is not defined!")
            }
        }
        if (noDice)
            throw new IllegalStateException("missing required properties for " +
                "upload");
    }
    
    uploadArchives {
        dependsOn(checkSigningRequirements);
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment);
                }
    
                repository(url: "${sonatypeStaging}") {
                    authentication(
                        userName: project.properties["sonatypeUsername"],
                        password: project.properties["sonatypePassword"]
                    );
                }
    
                snapshotRepository(url: "${sonatypeSnapshots}") {
                    authentication(
                        userName: project.properties["sonatypeUsername"],
                        password: project.properties["sonatypePassword"]
                    );
                }
            }
        }
    }
    
    /*
     * Configure pom.xml on install, uploadArchives
     */
    [
        install.repositories.mavenInstaller,
        uploadArchives.repositories.mavenDeployer
    ]*.pom*.whenConfigured { pom ->
        pom.project {
            name "${project.name}";
            packaging "jar";
            description "${project.description}";
            url "${projectURL}";
    
            scm {
                url "${gitrwscm}";
                connection "${gitrwscm}";
                developerConnection "${gitroscm}";
            }
    
            licenses {
                license {
                    name "Lesser General Public License, version 3 or greater";
                    url "http://www.gnu.org/licenses/lgpl.html";
                    distribution "repo";
                };
                license {
                    name "Apache Software License, version 2.0";
                    url "http://www.apache.org/licenses/LICENSE-2.0";
                    distribution "repo";
                }
            }
    
            developers {
                developer {
                    id "fge";
                    name "Francis Galiegue";
                    email "fgaliegue@gmail.com";
                }
            }
        }
    }
    
    ext.forRelease = !version.endsWith("-SNAPSHOT");
    signing {
        required { forRelease && gradle.taskGraph.hasTask("uploadArchives") };
        sign configurations.archives;
    }
}

